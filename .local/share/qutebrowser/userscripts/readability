#!/usr/bin/env python3
#
# Executes python-readability on current page and opens the summary as new tab.
#
# Depends on the python-readability package, or its fork:
#
#   - https://github.com/buriy/python-readability
#   - https://github.com/bookieio/breadability
#
# Usage:
#   :spawn --userscript readability
#
from __future__ import absolute_import
import codecs, os
from newspaper import Article

tmpfile = os.path.join(
    os.environ.get('QUTE_DATA_DIR',
                   os.path.expanduser('~/.local/share/qutebrowser')),
    'userscripts/readability.html')

path = os.path.expanduser('~/.local/share/qutebrowser/userscripts')

if not os.path.exists(os.path.dirname(tmpfile)):
    os.makedirs(os.path.dirname(tmpfile))

with codecs.open(os.environ['QUTE_HTML'], 'r', 'utf-8') as source:
    data = source.read()

    article = Article(os.environ['QUTE_URL'], keep_article_html=True) 
    article.download(input_html = data)
    article.parse()

    title = article.title
    content = article.article_html

    with codecs.open(tmpfile, 'w', 'utf-8') as target:
        target.write('<!DOCTYPE html>')
        target.write('<html>')
        target.write('<head>')
        target.write('<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />')
        target.write('<title> %s </title>' % title)
        target.write('<link rel="stylesheet" type="text/css" href="file://%s/custom.css" media="screen">' % path)
        target.write('<link rel="stylesheet" type="text/css" href="file://%s/print.css" media="print">' % path)
        target.write('</head>')
        target.write('<body>')

        if article.has_top_image():
            target.write('<img src=\'%s\'>' % article.top_image)

        target.write('<h1>%s</h1>' % title)
        target.write(content)
        target.write('</body>')
        target.write('</html>')

    with open(os.environ['QUTE_FIFO'], 'w') as fifo:
        fifo.write('open -t %s' % tmpfile)
