{
  "languageserver": {
    "clojure-lsp": {
      "command": "bash",
      "args": [
        "-c",
        "clojure-lsp"
      ],
      "filetypes": [
        "clojure"
      ],
      "rootPatterns": [
        "project.clj",
        "build.boot",
        "deps.edn"
      ],
      "additionalSchemes": [
        "jar",
        "zipfile"
      ],
      "initializationOptions": {}
    },
    "xml-lsp": {
      "command": "bash",
      "args": [
        "-c",
        "lsp4xml"
      ],
      "filetypes": [
        "xml"
      ],
      "rootPatterns": [],
      "additionalSchemes": [],
      "initializationOptions": {}
    },
    "haskell": {
      "command": "hie-wrapper",
      "rootPatterns": [
        ".stack.yaml",
        "cabal.config",
        "package.yaml"
      ],
      "filetypes": [
        "hs",
        "lhs",
        "haskell"
      ],
      "initializationOptions": {},
      "settings": {
        "languageServerHaskell": {
          "hlintOn": false,
          "maxNumberOfProblems": 10,
          "completionSnippetsOn": true
        }
      }
    },
    "julia": {
      "command": "/usr/bin/julia",
      "args": [
        "--startup-file=no",
        "--history-file=no",
        "-e",
        "using LanguageServer; using Pkg; import StaticLint; import SymbolServer; env_path = dirname(Pkg.Types.Context().env.project_file); debug = false; server = LanguageServer.LanguageServerInstance(stdin, stdout, debug, env_path, \"\", Dict()); server.runlinter = true; run(server);"
      ],
      "filetypes": [
        "julia"
      ]
    },
    "bash": {
      "command": "bash-language-server",
      "args": [
        "start"
      ],
      "filetypes": [
        "sh"
      ],
      "ignoredRootPaths": [
        "~"
      ]
    },
    "dockerfile": {
      "command": "docker-langserver",
      "filetypes": [
        "dockerfile"
      ],
      "args": [
        "--stdio"
      ]
    },
    "clangd": {
      "command": "clangd",
      "rootPatterns": [
        "compile_flags.txt",
        "compile_commands.json",
        ".vim/",
        ".git/",
        ".hg/"
      ],
      "filetypes": [
        "c",
        "cpp",
        "objc",
        "objcpp"
      ]
    },
    "crystal": {
      "command": "scry",
      "rootPatterns": [
        ".git/",
        ".hg/"
      ],
      "filetypes": [
        "crystal"
      ]
    },
    "golang": {
      "command": "gopls",
      "rootPatterns": [
        "go.mod",
        ".vim/",
        ".git/",
        ".hg/"
      ],
      "filetypes": [
        "go"
      ],
      "initializationOptions": {
        "usePlaceholders": true
      }
    }
  },
  "java.errors.incompleteClasspath.severity": "ignore",
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  "tsserver.enable": true,
  "html.format.wrapAttributes": "auto",
  "html.format.indentInnerHtml": true,
  "html.format.preserveNewLines": true,
  "java.format.settings.url": "https://git.sr.ht/~patrickpichler/java-formatter-settings/blob/master/eclipse-formatter.xml",
  "java.format.settings.profile": "GoogleStyle"
}
